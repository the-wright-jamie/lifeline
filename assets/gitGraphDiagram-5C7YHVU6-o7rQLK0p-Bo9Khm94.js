import{m as J}from"./chunk-BAOP5US2-C9QlnglV-CweIyjvj.js";import{e as Q}from"./chunk-RGXPSUNZ-jYorlhhD-peXsgurz.js";import{A as Z,d as m,c as ee,D as re,F as te,J as ne,$ as w,a as oe,U as ce,G as ae,Y as ie,m as se,X as de,e as L,t as he,l as $e,r as me,K as le}from"./index-BCIuWlb4.js";import{X as fe}from"./gitGraph-YCYPL57B-MiYrXWen-C6RIamGD.js";import"./_baseUniq-v35O2o7d-CjohJPW9.js";import"./_basePickBy-CyGFI_ex-DyIyuHBU.js";import"./clone-xDQJtMzt-28I2Zkqa.js";var x={NORMAL:0,REVERSE:1,HIGHLIGHT:2,MERGE:3,CHERRY_PICK:4},ue=Z.gitGraph,O=m(()=>re({...ue,...te().gitGraph}),"getConfig"),s=new Q(()=>{const r=O(),e=r.mainBranchName,t=r.mainBranchOrder;return{mainBranchName:e,commits:new Map,head:null,branchConfig:new Map([[e,{name:e,order:t}]]),branches:new Map([[e,null]]),currBranch:e,direction:"LR",seq:0,options:{}}});function D(){return ne({length:7})}m(D,"getID");function Y(r,e){const t=Object.create(null);return r.reduce((c,a)=>{const i=e(a);return t[i]||(t[i]=!0,c.push(a)),c},[])}m(Y,"uniqBy");var ge=m(function(r){s.records.direction=r},"setDirection"),ye=m(function(r){w.debug("options str",r),r=r==null?void 0:r.trim(),r=r||"{}";try{s.records.options=JSON.parse(r)}catch(e){w.error("error while parsing gitGraph options",e.message)}},"setOptions"),pe=m(function(){return s.records.options},"getOptions"),xe=m(function(r){let e=r.msg,t=r.id;const c=r.type;let a=r.tags;w.info("commit",e,t,c,a),w.debug("Entering commit:",e,t,c,a);const i=O();t=L.sanitizeText(t,i),e=L.sanitizeText(e,i),a=a==null?void 0:a.map(d=>L.sanitizeText(d,i));const h={id:t||s.records.seq+"-"+D(),message:e,seq:s.records.seq++,type:c??x.NORMAL,tags:a??[],parents:s.records.head==null?[]:[s.records.head.id],branch:s.records.currBranch};s.records.head=h,w.info("main branch",i.mainBranchName),s.records.commits.set(h.id,h),s.records.branches.set(s.records.currBranch,h.id),w.debug("in pushCommit "+h.id)},"commit"),be=m(function(r){let e=r.name;const t=r.order;if(e=L.sanitizeText(e,O()),s.records.branches.has(e))throw new Error(`Trying to create an existing branch. (Help: Either use a new name if you want create a new branch or try using "checkout ${e}")`);s.records.branches.set(e,s.records.head!=null?s.records.head.id:null),s.records.branchConfig.set(e,{name:e,order:t}),F(e),w.debug("in createBranch")},"branch"),we=m(r=>{let e=r.branch,t=r.id;const c=r.type,a=r.tags,i=O();e=L.sanitizeText(e,i),t&&(t=L.sanitizeText(t,i));const h=s.records.branches.get(s.records.currBranch),d=s.records.branches.get(e),l=h?s.records.commits.get(h):void 0,n=d?s.records.commits.get(d):void 0;if(l&&n&&l.branch===e)throw new Error(`Cannot merge branch '${e}' into itself.`);if(s.records.currBranch===e){const $=new Error('Incorrect usage of "merge". Cannot merge a branch to itself');throw $.hash={text:`merge ${e}`,token:`merge ${e}`,expected:["branch abc"]},$}if(l===void 0||!l){const $=new Error(`Incorrect usage of "merge". Current branch (${s.records.currBranch})has no commits`);throw $.hash={text:`merge ${e}`,token:`merge ${e}`,expected:["commit"]},$}if(!s.records.branches.has(e)){const $=new Error('Incorrect usage of "merge". Branch to be merged ('+e+") does not exist");throw $.hash={text:`merge ${e}`,token:`merge ${e}`,expected:[`branch ${e}`]},$}if(n===void 0||!n){const $=new Error('Incorrect usage of "merge". Branch to be merged ('+e+") has no commits");throw $.hash={text:`merge ${e}`,token:`merge ${e}`,expected:['"commit"']},$}if(l===n){const $=new Error('Incorrect usage of "merge". Both branches have same head');throw $.hash={text:`merge ${e}`,token:`merge ${e}`,expected:["branch abc"]},$}if(t&&s.records.commits.has(t)){const $=new Error('Incorrect usage of "merge". Commit with id:'+t+" already exists, use different custom Id");throw $.hash={text:`merge ${e} ${t} ${c} ${a==null?void 0:a.join(" ")}`,token:`merge ${e} ${t} ${c} ${a==null?void 0:a.join(" ")}`,expected:[`merge ${e} ${t}_UNIQUE ${c} ${a==null?void 0:a.join(" ")}`]},$}const o=d||"",p={id:t||`${s.records.seq}-${D()}`,message:`merged branch ${e} into ${s.records.currBranch}`,seq:s.records.seq++,parents:s.records.head==null?[]:[s.records.head.id,o],branch:s.records.currBranch,type:x.MERGE,customType:c,customId:!!t,tags:a??[]};s.records.head=p,s.records.commits.set(p.id,p),s.records.branches.set(s.records.currBranch,p.id),w.debug(s.records.branches),w.debug("in mergeBranch")},"merge"),Be=m(function(r){let e=r.id,t=r.targetId,c=r.tags,a=r.parent;w.debug("Entering cherryPick:",e,t,c);const i=O();if(e=L.sanitizeText(e,i),t=L.sanitizeText(t,i),c=c==null?void 0:c.map(l=>L.sanitizeText(l,i)),a=L.sanitizeText(a,i),!e||!s.records.commits.has(e)){const l=new Error('Incorrect usage of "cherryPick". Source commit id should exist and provided');throw l.hash={text:`cherryPick ${e} ${t}`,token:`cherryPick ${e} ${t}`,expected:["cherry-pick abc"]},l}const h=s.records.commits.get(e);if(h===void 0||!h)throw new Error('Incorrect usage of "cherryPick". Source commit id should exist and provided');if(a&&!(Array.isArray(h.parents)&&h.parents.includes(a)))throw new Error("Invalid operation: The specified parent commit is not an immediate parent of the cherry-picked commit.");const d=h.branch;if(h.type===x.MERGE&&!a)throw new Error("Incorrect usage of cherry-pick: If the source commit is a merge commit, an immediate parent commit must be specified.");if(!t||!s.records.commits.has(t)){if(d===s.records.currBranch){const p=new Error('Incorrect usage of "cherryPick". Source commit is already on current branch');throw p.hash={text:`cherryPick ${e} ${t}`,token:`cherryPick ${e} ${t}`,expected:["cherry-pick abc"]},p}const l=s.records.branches.get(s.records.currBranch);if(l===void 0||!l){const p=new Error(`Incorrect usage of "cherry-pick". Current branch (${s.records.currBranch})has no commits`);throw p.hash={text:`cherryPick ${e} ${t}`,token:`cherryPick ${e} ${t}`,expected:["cherry-pick abc"]},p}const n=s.records.commits.get(l);if(n===void 0||!n){const p=new Error(`Incorrect usage of "cherry-pick". Current branch (${s.records.currBranch})has no commits`);throw p.hash={text:`cherryPick ${e} ${t}`,token:`cherryPick ${e} ${t}`,expected:["cherry-pick abc"]},p}const o={id:s.records.seq+"-"+D(),message:`cherry-picked ${h==null?void 0:h.message} into ${s.records.currBranch}`,seq:s.records.seq++,parents:s.records.head==null?[]:[s.records.head.id,h.id],branch:s.records.currBranch,type:x.CHERRY_PICK,tags:c?c.filter(Boolean):[`cherry-pick:${h.id}${h.type===x.MERGE?`|parent:${a}`:""}`]};s.records.head=o,s.records.commits.set(o.id,o),s.records.branches.set(s.records.currBranch,o.id),w.debug(s.records.branches),w.debug("in cherryPick")}},"cherryPick"),F=m(function(r){if(r=L.sanitizeText(r,O()),s.records.branches.has(r)){s.records.currBranch=r;const e=s.records.branches.get(s.records.currBranch);e===void 0||!e?s.records.head=null:s.records.head=s.records.commits.get(e)??null}else{const e=new Error(`Trying to checkout branch which is not yet created. (Help try using "branch ${r}")`);throw e.hash={text:`checkout ${r}`,token:`checkout ${r}`,expected:[`branch ${r}`]},e}},"checkout");function N(r,e,t){const c=r.indexOf(e);c===-1?r.push(t):r.splice(c,1,t)}m(N,"upsert");function W(r){const e=r.reduce((a,i)=>a.seq>i.seq?a:i,r[0]);let t="";r.forEach(function(a){a===e?t+="	*":t+="	|"});const c=[t,e.id,e.seq];for(const a in s.records.branches)s.records.branches.get(a)===e.id&&c.push(a);if(w.debug(c.join(" ")),e.parents&&e.parents.length==2&&e.parents[0]&&e.parents[1]){const a=s.records.commits.get(e.parents[0]);N(r,e,a),e.parents[1]&&r.push(s.records.commits.get(e.parents[1]))}else{if(e.parents.length==0)return;if(e.parents[0]){const a=s.records.commits.get(e.parents[0]);N(r,e,a)}}r=Y(r,a=>a.id),W(r)}m(W,"prettyPrintCommitHistory");var Ee=m(function(){w.debug(s.records.commits);const r=_()[0];W([r])},"prettyPrint"),ke=m(function(){s.reset(),he()},"clear"),Ce=m(function(){return[...s.records.branchConfig.values()].map((r,e)=>r.order!==null&&r.order!==void 0?r:{...r,order:parseFloat(`0.${e}`)}).sort((r,e)=>(r.order??0)-(e.order??0)).map(({name:r})=>({name:r}))},"getBranchesAsObjArray"),Le=m(function(){return s.records.branches},"getBranches"),Te=m(function(){return s.records.commits},"getCommits"),_=m(function(){const r=[...s.records.commits.values()];return r.forEach(function(e){w.debug(e.id)}),r.sort((e,t)=>e.seq-t.seq),r},"getCommitsArray"),Me=m(function(){return s.records.currBranch},"getCurrentBranch"),Pe=m(function(){return s.records.direction},"getDirection"),Re=m(function(){return s.records.head},"getHead"),X={commitType:x,getConfig:O,setDirection:ge,setOptions:ye,getOptions:pe,commit:xe,branch:be,merge:we,cherryPick:Be,checkout:F,prettyPrint:Ee,clear:ke,getBranchesAsObjArray:Ce,getBranches:Le,getCommits:Te,getCommitsArray:_,getCurrentBranch:Me,getDirection:Pe,getHead:Re,setAccTitle:oe,getAccTitle:ce,getAccDescription:ae,setAccDescription:ie,setDiagramTitle:se,getDiagramTitle:de},ve=m((r,e)=>{J(r,e),r.dir&&e.setDirection(r.dir);for(const t of r.statements)Ge(t,e)},"populate"),Ge=m((r,e)=>{const t={Commit:m(c=>e.commit(Ae(c)),"Commit"),Branch:m(c=>e.branch(Ie(c)),"Branch"),Merge:m(c=>e.merge(Oe(c)),"Merge"),Checkout:m(c=>e.checkout(qe(c)),"Checkout"),CherryPicking:m(c=>e.cherryPick(He(c)),"CherryPicking")}[r.$type];t?t(r):w.error(`Unknown statement type: ${r.$type}`)},"parseStatement"),Ae=m(r=>({id:r.id,msg:r.message??"",type:r.type!==void 0?x[r.type]:x.NORMAL,tags:r.tags??void 0}),"parseCommit"),Ie=m(r=>({name:r.name,order:r.order??0}),"parseBranch"),Oe=m(r=>({branch:r.branch,id:r.id??"",type:r.type!==void 0?x[r.type]:void 0,tags:r.tags??void 0}),"parseMerge"),qe=m(r=>r.branch,"parseCheckout"),He=m(r=>{var e;return{id:r.id,targetId:"",tags:((e=r.tags)==null?void 0:e.length)===0?void 0:r.tags,parent:r.parent}},"parseCherryPicking"),ze={parse:m(async r=>{const e=await fe("gitGraph",r);w.debug(e),ve(e,X)},"parse")},j=ee(),E=j==null?void 0:j.gitGraph,G=10,A=40,T=4,P=2,I=8,k=new Map,C=new Map,z=30,q=new Map,S=[],v=0,y="LR",Se=m(()=>{k.clear(),C.clear(),q.clear(),v=0,S=[],y="LR"},"clear"),U=m(r=>{const e=document.createElementNS("http://www.w3.org/2000/svg","text");return(typeof r=="string"?r.split(/\\n|\n|<br\s*\/?>/gi):r).forEach(t=>{const c=document.createElementNS("http://www.w3.org/2000/svg","tspan");c.setAttributeNS("http://www.w3.org/XML/1998/namespace","xml:space","preserve"),c.setAttribute("dy","1em"),c.setAttribute("x","0"),c.setAttribute("class","row"),c.textContent=t.trim(),e.appendChild(c)}),e},"drawText"),V=m(r=>{let e,t,c;return y==="BT"?(t=m((a,i)=>a<=i,"comparisonFunc"),c=1/0):(t=m((a,i)=>a>=i,"comparisonFunc"),c=0),r.forEach(a=>{var i,h;const d=y==="TB"||y=="BT"?(i=C.get(a))==null?void 0:i.y:(h=C.get(a))==null?void 0:h.x;d!==void 0&&t(d,c)&&(e=a,c=d)}),e},"findClosestParent"),De=m(r=>{let e="",t=1/0;return r.forEach(c=>{const a=C.get(c).y;a<=t&&(e=c,t=a)}),e||void 0},"findClosestParentBT"),Ne=m((r,e,t)=>{let c=t,a=t;const i=[];r.forEach(h=>{const d=e.get(h);if(!d)throw new Error(`Commit not found for key ${h}`);d.parents.length?(c=je(d),a=Math.max(c,a)):i.push(d),Ke(d,c)}),c=a,i.forEach(h=>{Ye(h,c,t)}),r.forEach(h=>{const d=e.get(h);if(d!=null&&d.parents.length){const l=De(d.parents);c=C.get(l).y-A,c<=a&&(a=c);const n=k.get(d.branch).pos,o=c-G;C.set(d.id,{x:n,y:o})}})},"setParallelBTPos"),We=m(r=>{var e;const t=V(r.parents.filter(a=>a!==null));if(!t)throw new Error(`Closest parent not found for commit ${r.id}`);const c=(e=C.get(t))==null?void 0:e.y;if(c===void 0)throw new Error(`Closest parent position not found for commit ${r.id}`);return c},"findClosestParentPos"),je=m(r=>We(r)+A,"calculateCommitPosition"),Ke=m((r,e)=>{const t=k.get(r.branch);if(!t)throw new Error(`Branch not found for commit ${r.id}`);const c=t.pos,a=e+G;return C.set(r.id,{x:c,y:a}),{x:c,y:a}},"setCommitPosition"),Ye=m((r,e,t)=>{const c=k.get(r.branch);if(!c)throw new Error(`Branch not found for commit ${r.id}`);const a=e+t,i=c.pos;C.set(r.id,{x:i,y:a})},"setRootPosition"),Fe=m((r,e,t,c,a,i)=>{if(i===x.HIGHLIGHT)r.append("rect").attr("x",t.x-10).attr("y",t.y-10).attr("width",20).attr("height",20).attr("class",`commit ${e.id} commit-highlight${a%I} ${c}-outer`),r.append("rect").attr("x",t.x-6).attr("y",t.y-6).attr("width",12).attr("height",12).attr("class",`commit ${e.id} commit${a%I} ${c}-inner`);else if(i===x.CHERRY_PICK)r.append("circle").attr("cx",t.x).attr("cy",t.y).attr("r",10).attr("class",`commit ${e.id} ${c}`),r.append("circle").attr("cx",t.x-3).attr("cy",t.y+2).attr("r",2.75).attr("fill","#fff").attr("class",`commit ${e.id} ${c}`),r.append("circle").attr("cx",t.x+3).attr("cy",t.y+2).attr("r",2.75).attr("fill","#fff").attr("class",`commit ${e.id} ${c}`),r.append("line").attr("x1",t.x+3).attr("y1",t.y+1).attr("x2",t.x).attr("y2",t.y-5).attr("stroke","#fff").attr("class",`commit ${e.id} ${c}`),r.append("line").attr("x1",t.x-3).attr("y1",t.y+1).attr("x2",t.x).attr("y2",t.y-5).attr("stroke","#fff").attr("class",`commit ${e.id} ${c}`);else{const h=r.append("circle");if(h.attr("cx",t.x),h.attr("cy",t.y),h.attr("r",e.type===x.MERGE?9:10),h.attr("class",`commit ${e.id} commit${a%I}`),i===x.MERGE){const d=r.append("circle");d.attr("cx",t.x),d.attr("cy",t.y),d.attr("r",6),d.attr("class",`commit ${c} ${e.id} commit${a%I}`)}i===x.REVERSE&&r.append("path").attr("d",`M ${t.x-5},${t.y-5}L${t.x+5},${t.y+5}M${t.x-5},${t.y+5}L${t.x+5},${t.y-5}`).attr("class",`commit ${c} ${e.id} commit${a%I}`)}},"drawCommitBullet"),_e=m((r,e,t,c)=>{var a;if(e.type!==x.CHERRY_PICK&&(e.customId&&e.type===x.MERGE||e.type!==x.MERGE)&&E!=null&&E.showCommitLabel){const i=r.append("g"),h=i.insert("rect").attr("class","commit-label-bkg"),d=i.append("text").attr("x",c).attr("y",t.y+25).attr("class","commit-label").text(e.id),l=(a=d.node())==null?void 0:a.getBBox();if(l&&(h.attr("x",t.posWithOffset-l.width/2-P).attr("y",t.y+13.5).attr("width",l.width+2*P).attr("height",l.height+2*P),y==="TB"||y==="BT"?(h.attr("x",t.x-(l.width+4*T+5)).attr("y",t.y-12),d.attr("x",t.x-(l.width+4*T)).attr("y",t.y+l.height-12)):d.attr("x",t.posWithOffset-l.width/2),E.rotateCommitLabel))if(y==="TB"||y==="BT")d.attr("transform","rotate(-45, "+t.x+", "+t.y+")"),h.attr("transform","rotate(-45, "+t.x+", "+t.y+")");else{const n=-7.5-(l.width+10)/25*9.5,o=10+l.width/25*8.5;i.attr("transform","translate("+n+", "+o+") rotate(-45, "+c+", "+t.y+")")}}},"drawCommitLabel"),Xe=m((r,e,t,c)=>{var a;if(e.tags.length>0){let i=0,h=0,d=0;const l=[];for(const n of e.tags.reverse()){const o=r.insert("polygon"),p=r.append("circle"),$=r.append("text").attr("y",t.y-16-i).attr("class","tag-label").text(n),f=(a=$.node())==null?void 0:a.getBBox();if(!f)throw new Error("Tag bbox not found");h=Math.max(h,f.width),d=Math.max(d,f.height),$.attr("x",t.posWithOffset-f.width/2),l.push({tag:$,hole:p,rect:o,yOffset:i}),i+=20}for(const{tag:n,hole:o,rect:p,yOffset:$}of l){const f=d/2,g=t.y-19.2-$;if(p.attr("class","tag-label-bkg").attr("points",`
      ${c-h/2-T/2},${g+P}  
      ${c-h/2-T/2},${g-P}
      ${t.posWithOffset-h/2-T},${g-f-P}
      ${t.posWithOffset+h/2+T},${g-f-P}
      ${t.posWithOffset+h/2+T},${g+f+P}
      ${t.posWithOffset-h/2-T},${g+f+P}`),o.attr("cy",g).attr("cx",c-h/2+T/2).attr("r",1.5).attr("class","tag-hole"),y==="TB"||y==="BT"){const u=c+$;p.attr("class","tag-label-bkg").attr("points",`
        ${t.x},${u+2}
        ${t.x},${u-2}
        ${t.x+G},${u-f-2}
        ${t.x+G+h+4},${u-f-2}
        ${t.x+G+h+4},${u+f+2}
        ${t.x+G},${u+f+2}`).attr("transform","translate(12,12) rotate(45, "+t.x+","+c+")"),o.attr("cx",t.x+T/2).attr("cy",u).attr("transform","translate(12,12) rotate(45, "+t.x+","+c+")"),n.attr("x",t.x+5).attr("y",u+3).attr("transform","translate(14,14) rotate(45, "+t.x+","+c+")")}}}},"drawCommitTags"),Ue=m(r=>{switch(r.customType??r.type){case x.NORMAL:return"commit-normal";case x.REVERSE:return"commit-reverse";case x.HIGHLIGHT:return"commit-highlight";case x.MERGE:return"commit-merge";case x.CHERRY_PICK:return"commit-cherry-pick";default:return"commit-normal"}},"getCommitClassType"),Ve=m((r,e,t,c)=>{const a={x:0,y:0};if(r.parents.length>0){const i=V(r.parents);if(i){const h=c.get(i)??a;return e==="TB"?h.y+A:e==="BT"?(c.get(r.id)??a).y-A:h.x+A}}else return e==="TB"?z:e==="BT"?(c.get(r.id)??a).y-A:0;return 0},"calculatePosition"),Je=m((r,e,t)=>{var c,a;const i=y==="BT"&&t?e:e+G,h=y==="TB"||y==="BT"?i:(c=k.get(r.branch))==null?void 0:c.pos,d=y==="TB"||y==="BT"?(a=k.get(r.branch))==null?void 0:a.pos:i;if(d===void 0||h===void 0)throw new Error(`Position were undefined for commit ${r.id}`);return{x:d,y:h,posWithOffset:i}},"getCommitPosition"),K=m((r,e,t)=>{if(!E)throw new Error("GitGraph config not found");const c=r.append("g").attr("class","commit-bullets"),a=r.append("g").attr("class","commit-labels");let i=y==="TB"||y==="BT"?z:0;const h=[...e.keys()],d=(E==null?void 0:E.parallelCommits)??!1,l=m((o,p)=>{var $,f;const g=($=e.get(o))==null?void 0:$.seq,u=(f=e.get(p))==null?void 0:f.seq;return g!==void 0&&u!==void 0?g-u:0},"sortKeys");let n=h.sort(l);y==="BT"&&(d&&Ne(n,e,i),n=n.reverse()),n.forEach(o=>{var p;const $=e.get(o);if(!$)throw new Error(`Commit not found for key ${o}`);d&&(i=Ve($,y,i,C));const f=Je($,i,d);if(t){const g=Ue($),u=$.customType??$.type,M=((p=k.get($.branch))==null?void 0:p.index)??0;Fe(c,$,f,g,M,u),_e(a,$,f,i),Xe(a,$,f,i)}y==="TB"||y==="BT"?C.set($.id,{x:f.x,y:f.posWithOffset}):C.set($.id,{x:f.posWithOffset,y:f.y}),i=y==="BT"&&d?i+A:i+A+G,i>v&&(v=i)})},"drawCommits"),Qe=m((r,e,t,c,a)=>{const i=(y==="TB"||y==="BT"?t.x<c.x:t.y<c.y)?e.branch:r.branch,h=m(l=>l.branch===i,"isOnBranchToGetCurve"),d=m(l=>l.seq>r.seq&&l.seq<e.seq,"isBetweenCommits");return[...a.values()].some(l=>d(l)&&h(l))},"shouldRerouteArrow"),H=m((r,e,t=0)=>{const c=r+Math.abs(r-e)/2;if(t>5)return c;if(S.every(i=>Math.abs(i-c)>=10))return S.push(c),c;const a=Math.abs(r-e);return H(r,e-a/5,t+1)},"findLane"),Ze=m((r,e,t,c)=>{var a,i,h,d,l;const n=C.get(e.id),o=C.get(t.id);if(n===void 0||o===void 0)throw new Error(`Commit positions not found for commits ${e.id} and ${t.id}`);const p=Qe(e,t,n,o,c);let $="",f="",g=0,u=0,M=(a=k.get(t.branch))==null?void 0:a.index;t.type===x.MERGE&&e.id!==t.parents[0]&&(M=(i=k.get(e.branch))==null?void 0:i.index);let b;if(p){$="A 10 10, 0, 0, 0,",f="A 10 10, 0, 0, 1,",g=10,u=10;const R=n.y<o.y?H(n.y,o.y):H(o.y,n.y),B=n.x<o.x?H(n.x,o.x):H(o.x,n.x);y==="TB"?n.x<o.x?b=`M ${n.x} ${n.y} L ${B-g} ${n.y} ${f} ${B} ${n.y+u} L ${B} ${o.y-g} ${$} ${B+u} ${o.y} L ${o.x} ${o.y}`:(M=(h=k.get(e.branch))==null?void 0:h.index,b=`M ${n.x} ${n.y} L ${B+g} ${n.y} ${$} ${B} ${n.y+u} L ${B} ${o.y-g} ${f} ${B-u} ${o.y} L ${o.x} ${o.y}`):y==="BT"?n.x<o.x?b=`M ${n.x} ${n.y} L ${B-g} ${n.y} ${$} ${B} ${n.y-u} L ${B} ${o.y+g} ${f} ${B+u} ${o.y} L ${o.x} ${o.y}`:(M=(d=k.get(e.branch))==null?void 0:d.index,b=`M ${n.x} ${n.y} L ${B+g} ${n.y} ${f} ${B} ${n.y-u} L ${B} ${o.y+g} ${$} ${B-u} ${o.y} L ${o.x} ${o.y}`):n.y<o.y?b=`M ${n.x} ${n.y} L ${n.x} ${R-g} ${$} ${n.x+u} ${R} L ${o.x-g} ${R} ${f} ${o.x} ${R+u} L ${o.x} ${o.y}`:(M=(l=k.get(e.branch))==null?void 0:l.index,b=`M ${n.x} ${n.y} L ${n.x} ${R+g} ${f} ${n.x+u} ${R} L ${o.x-g} ${R} ${$} ${o.x} ${R-u} L ${o.x} ${o.y}`)}else $="A 20 20, 0, 0, 0,",f="A 20 20, 0, 0, 1,",g=20,u=20,y==="TB"?(n.x<o.x&&(t.type===x.MERGE&&e.id!==t.parents[0]?b=`M ${n.x} ${n.y} L ${n.x} ${o.y-g} ${$} ${n.x+u} ${o.y} L ${o.x} ${o.y}`:b=`M ${n.x} ${n.y} L ${o.x-g} ${n.y} ${f} ${o.x} ${n.y+u} L ${o.x} ${o.y}`),n.x>o.x&&($="A 20 20, 0, 0, 0,",f="A 20 20, 0, 0, 1,",g=20,u=20,t.type===x.MERGE&&e.id!==t.parents[0]?b=`M ${n.x} ${n.y} L ${n.x} ${o.y-g} ${f} ${n.x-u} ${o.y} L ${o.x} ${o.y}`:b=`M ${n.x} ${n.y} L ${o.x+g} ${n.y} ${$} ${o.x} ${n.y+u} L ${o.x} ${o.y}`),n.x===o.x&&(b=`M ${n.x} ${n.y} L ${o.x} ${o.y}`)):y==="BT"?(n.x<o.x&&(t.type===x.MERGE&&e.id!==t.parents[0]?b=`M ${n.x} ${n.y} L ${n.x} ${o.y+g} ${f} ${n.x+u} ${o.y} L ${o.x} ${o.y}`:b=`M ${n.x} ${n.y} L ${o.x-g} ${n.y} ${$} ${o.x} ${n.y-u} L ${o.x} ${o.y}`),n.x>o.x&&($="A 20 20, 0, 0, 0,",f="A 20 20, 0, 0, 1,",g=20,u=20,t.type===x.MERGE&&e.id!==t.parents[0]?b=`M ${n.x} ${n.y} L ${n.x} ${o.y+g} ${$} ${n.x-u} ${o.y} L ${o.x} ${o.y}`:b=`M ${n.x} ${n.y} L ${o.x-g} ${n.y} ${$} ${o.x} ${n.y-u} L ${o.x} ${o.y}`),n.x===o.x&&(b=`M ${n.x} ${n.y} L ${o.x} ${o.y}`)):(n.y<o.y&&(t.type===x.MERGE&&e.id!==t.parents[0]?b=`M ${n.x} ${n.y} L ${o.x-g} ${n.y} ${f} ${o.x} ${n.y+u} L ${o.x} ${o.y}`:b=`M ${n.x} ${n.y} L ${n.x} ${o.y-g} ${$} ${n.x+u} ${o.y} L ${o.x} ${o.y}`),n.y>o.y&&(t.type===x.MERGE&&e.id!==t.parents[0]?b=`M ${n.x} ${n.y} L ${o.x-g} ${n.y} ${$} ${o.x} ${n.y-u} L ${o.x} ${o.y}`:b=`M ${n.x} ${n.y} L ${n.x} ${o.y+g} ${f} ${n.x+u} ${o.y} L ${o.x} ${o.y}`),n.y===o.y&&(b=`M ${n.x} ${n.y} L ${o.x} ${o.y}`));if(b===void 0)throw new Error("Line definition not found");r.append("path").attr("d",b).attr("class","arrow arrow"+M%I)},"drawArrow"),er=m((r,e)=>{const t=r.append("g").attr("class","commit-arrows");[...e.keys()].forEach(c=>{const a=e.get(c);a.parents&&a.parents.length>0&&a.parents.forEach(i=>{Ze(t,e.get(i),a,e)})})},"drawArrows"),rr=m((r,e)=>{const t=r.append("g");e.forEach((c,a)=>{var i;const h=a%I,d=(i=k.get(c.name))==null?void 0:i.pos;if(d===void 0)throw new Error(`Position not found for branch ${c.name}`);const l=t.append("line");l.attr("x1",0),l.attr("y1",d),l.attr("x2",v),l.attr("y2",d),l.attr("class","branch branch"+h),y==="TB"?(l.attr("y1",z),l.attr("x1",d),l.attr("y2",v),l.attr("x2",d)):y==="BT"&&(l.attr("y1",v),l.attr("x1",d),l.attr("y2",z),l.attr("x2",d)),S.push(d);const n=c.name,o=U(n),p=t.insert("rect"),$=t.insert("g").attr("class","branchLabel").insert("g").attr("class","label branch-label"+h);$.node().appendChild(o);const f=o.getBBox();p.attr("class","branchLabelBkg label"+h).attr("rx",4).attr("ry",4).attr("x",-f.width-4-((E==null?void 0:E.rotateCommitLabel)===!0?30:0)).attr("y",-f.height/2+8).attr("width",f.width+18).attr("height",f.height+4),$.attr("transform","translate("+(-f.width-14-((E==null?void 0:E.rotateCommitLabel)===!0?30:0))+", "+(d-f.height/2-1)+")"),y==="TB"?(p.attr("x",d-f.width/2-10).attr("y",0),$.attr("transform","translate("+(d-f.width/2-5)+", 0)")):y==="BT"?(p.attr("x",d-f.width/2-10).attr("y",v),$.attr("transform","translate("+(d-f.width/2-5)+", "+v+")")):p.attr("transform","translate(-19, "+(d-f.height/2)+")")})},"drawBranches"),tr=m(function(r,e,t,c,a){return k.set(r,{pos:e,index:t}),e+=50+(a?40:0)+(y==="TB"||y==="BT"?c.width/2:0),e},"setBranchPosition"),nr=m(function(r,e,t,c){if(Se(),w.debug("in gitgraph renderer",r+`
`,"id:",e,t),!E)throw new Error("GitGraph config not found");const a=E.rotateCommitLabel??!1,i=c.db;q=i.getCommits();const h=i.getBranchesAsObjArray();y=i.getDirection();const d=$e(`[id="${e}"]`);let l=0;h.forEach((n,o)=>{var p;const $=U(n.name),f=d.append("g"),g=f.insert("g").attr("class","branchLabel"),u=g.insert("g").attr("class","label branch-label");(p=u.node())==null||p.appendChild($);const M=$.getBBox();l=tr(n.name,l,o,M,a),u.remove(),g.remove(),f.remove()}),K(d,q,!1),E.showBranches&&rr(d,h),er(d,q),K(d,q,!0),me.insertTitle(d,"gitTitleText",E.titleTopMargin??0,i.getDiagramTitle()),le(void 0,d,E.diagramPadding,E.useMaxWidth)},"draw"),or={draw:nr},cr=m(r=>`
  .commit-id,
  .commit-msg,
  .branch-label {
    fill: lightgrey;
    color: lightgrey;
    font-family: 'trebuchet ms', verdana, arial, sans-serif;
    font-family: var(--mermaid-font-family);
  }
  ${[0,1,2,3,4,5,6,7].map(e=>`
        .branch-label${e} { fill: ${r["gitBranchLabel"+e]}; }
        .commit${e} { stroke: ${r["git"+e]}; fill: ${r["git"+e]}; }
        .commit-highlight${e} { stroke: ${r["gitInv"+e]}; fill: ${r["gitInv"+e]}; }
        .label${e}  { fill: ${r["git"+e]}; }
        .arrow${e} { stroke: ${r["git"+e]}; }
        `).join(`
`)}

  .branch {
    stroke-width: 1;
    stroke: ${r.lineColor};
    stroke-dasharray: 2;
  }
  .commit-label { font-size: ${r.commitLabelFontSize}; fill: ${r.commitLabelColor};}
  .commit-label-bkg { font-size: ${r.commitLabelFontSize}; fill: ${r.commitLabelBackground}; opacity: 0.5; }
  .tag-label { font-size: ${r.tagLabelFontSize}; fill: ${r.tagLabelColor};}
  .tag-label-bkg { fill: ${r.tagLabelBackground}; stroke: ${r.tagLabelBorder}; }
  .tag-hole { fill: ${r.textColor}; }

  .commit-merge {
    stroke: ${r.primaryColor};
    fill: ${r.primaryColor};
  }
  .commit-reverse {
    stroke: ${r.primaryColor};
    fill: ${r.primaryColor};
    stroke-width: 3;
  }
  .commit-highlight-outer {
  }
  .commit-highlight-inner {
    stroke: ${r.primaryColor};
    fill: ${r.primaryColor};
  }

  .arrow { stroke-width: 8; stroke-linecap: round; fill: none}
  .gitTitleText {
    text-anchor: middle;
    font-size: 18px;
    fill: ${r.textColor};
  }
`,"getStyles"),ar=cr,fr={parser:ze,db:X,renderer:or,styles:ar};export{fr as diagram};
